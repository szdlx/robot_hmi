// Generated by gencpp from file road_recognition_msgs/RoadRecognition.msg
// DO NOT EDIT!


#ifndef ROAD_RECOGNITION_MSGS_MESSAGE_ROADRECOGNITION_H
#define ROAD_RECOGNITION_MSGS_MESSAGE_ROADRECOGNITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace road_recognition_msgs
{
template <class ContainerAllocator>
struct RoadRecognition_
{
  typedef RoadRecognition_<ContainerAllocator> Type;

  RoadRecognition_()
    : road_type(0)
    , road_curvature(0.0)
    , road_slope(0.0)  {
    }
  RoadRecognition_(const ContainerAllocator& _alloc)
    : road_type(0)
    , road_curvature(0.0)
    , road_slope(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _road_type_type;
  _road_type_type road_type;

   typedef float _road_curvature_type;
  _road_curvature_type road_curvature;

   typedef float _road_slope_type;
  _road_slope_type road_slope;





  typedef boost::shared_ptr< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> const> ConstPtr;

}; // struct RoadRecognition_

typedef ::road_recognition_msgs::RoadRecognition_<std::allocator<void> > RoadRecognition;

typedef boost::shared_ptr< ::road_recognition_msgs::RoadRecognition > RoadRecognitionPtr;
typedef boost::shared_ptr< ::road_recognition_msgs::RoadRecognition const> RoadRecognitionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::road_recognition_msgs::RoadRecognition_<ContainerAllocator1> & lhs, const ::road_recognition_msgs::RoadRecognition_<ContainerAllocator2> & rhs)
{
  return lhs.road_type == rhs.road_type &&
    lhs.road_curvature == rhs.road_curvature &&
    lhs.road_slope == rhs.road_slope;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::road_recognition_msgs::RoadRecognition_<ContainerAllocator1> & lhs, const ::road_recognition_msgs::RoadRecognition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace road_recognition_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d82dc3216bb3223f22c1220105c3eca5";
  }

  static const char* value(const ::road_recognition_msgs::RoadRecognition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd82dc3216bb3223fULL;
  static const uint64_t static_value2 = 0x22c1220105c3eca5ULL;
};

template<class ContainerAllocator>
struct DataType< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "road_recognition_msgs/RoadRecognition";
  }

  static const char* value(const ::road_recognition_msgs::RoadRecognition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## 道路识别消息类型\n"
"## 道路种类 0：砂石路   1：土路    2：冰雪路\n"
"int32 road_type\n"
"\n"
"##道路曲率\n"
"float32 road_curvature\n"
"\n"
"##道路坡度\n"
"float32 road_slope\n"
;
  }

  static const char* value(const ::road_recognition_msgs::RoadRecognition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.road_type);
      stream.next(m.road_curvature);
      stream.next(m.road_slope);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RoadRecognition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::road_recognition_msgs::RoadRecognition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::road_recognition_msgs::RoadRecognition_<ContainerAllocator>& v)
  {
    s << indent << "road_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.road_type);
    s << indent << "road_curvature: ";
    Printer<float>::stream(s, indent + "  ", v.road_curvature);
    s << indent << "road_slope: ";
    Printer<float>::stream(s, indent + "  ", v.road_slope);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROAD_RECOGNITION_MSGS_MESSAGE_ROADRECOGNITION_H
